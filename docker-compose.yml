# Docker Swarm Stack Configuration for Mini-SaaS Notes App
# Deploy with:
#   docker swarm init                                    # once, on a manager
#   docker build -t mini-sass/api:latest ./backend
#   docker build -t mini-sass/frontend:latest ./frontend
#   docker stack deploy -c docker-compose.yml mini-sass

version: "3.9"

networks:
  mini-sass:
    driver: overlay
    attachable: true

volumes:
  postgres_data:
  redis_data:

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-quicknotes}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-quicknotes123}
      POSTGRES_DB: ${POSTGRES_DB:-quicknotes}
    networks: [mini-sass]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      placement:
        constraints: [node.platform.os == linux]
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    networks: [mini-sass]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      placement:
        constraints: [node.platform.os == linux]
      resources:
        limits:
          cpus: "0.25"
          memory: 256M
        reservations:
          memory: 128M

  api:
    image: mini-sass/api:latest
    environment:
      PORT: 3000
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-quicknotes}:${POSTGRES_PASSWORD:-quicknotes123}@postgres:5432/${POSTGRES_DB:-quicknotes}?schema=public
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-your-super-secret-jwt-access-key-change-in-production}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-jwt-refresh-key-change-in-production}
      JWT_ACCESS_TTL: ${JWT_ACCESS_TTL:-3600}
      JWT_REFRESH_TTL: ${JWT_REFRESH_TTL:-604800}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
    networks: [mini-sass]
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 40s
    deploy:
      mode: replicated
      replicas: 3                    # Scale API to 3 instances
      update_config:
        order: start-first
        parallelism: 1
        delay: 10s
        failure_action: rollback
      rollback_config:
        parallelism: 1
        delay: 5s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M

  nginx:
    image: nginx:1.27-alpine
    networks: [mini-sass]
    ports:
      - "8080:8080"                 # API load balancer endpoint
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /dev/null:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    deploy:
      mode: replicated
      replicas: 1                    # Load balancer redundancy
      update_config:
        order: start-first
        parallelism: 1
      restart_policy:
        condition: any
        delay: 5s
      placement:
        constraints: [node.platform.os == linux]
      resources:
        limits:
          cpus: "0.25"
          memory: 256M
        reservations:
          memory: 128M

  frontend:
    image: mini-sass/frontend:latest
    environment:
      VITE_API_BASE_URL: http://localhost:8080/api
    networks: [mini-sass]
    # No direct port exposure - served through nginx proxy
    depends_on:
      - nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 15s
      timeout: 3s
      retries: 3
      start_period: 10s
    deploy:
      mode: replicated
      replicas: 2                    # Frontend redundancy
      update_config:
        order: start-first
        parallelism: 1
        delay: 5s
      restart_policy:
        condition: any
        delay: 5s
      resources:
        limits:
          cpus: "0.25"
          memory: 256M
        reservations:
          memory: 128M

# Optional: Monitoring stack (uncomment to enable)
#  prometheus:
#    image: prom/prometheus:latest
#    networks: [mini-sass]
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#    deploy:
#      placement:
#        constraints: [node.platform.os == linux]
#
#  grafana:
#    image: grafana/grafana:latest
#    networks: [mini-sass]
#    ports:
#      - "3001:3000"
#    environment:
#      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
#    deploy:
#      placement:
#        constraints: [node.platform.os == linux]